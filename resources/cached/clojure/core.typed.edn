{:graph {:edges [{:source clojure.core.typed.init, :target clojure.core.typed.profiling} {:source clojure.core.typed.init, :target clojure.core.typed.current-impl} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.dynvars, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.nsforms, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.load-core, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.utils} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.subst} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.base-env-common} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.bootstrap-cljs} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.base-env-helper-cljs} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.deps.clojure.tools.namespace.find, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.deps.clojure.tools.namespace.find, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.side-effect, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-loops, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.all-envs, :target clojure.core.typed.var-env} {:source clojure.core.typed.all-envs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.all-envs, :target clojure.core.typed.name-env} {:source clojure.core.typed.all-envs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.all-envs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.reset-caches} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.collect-cljs} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.check-cljs} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.reset-env} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.check-ns-common} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.analyze-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.collect-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.check-form-common} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.check-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.analyze-cljs} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.check.utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect-cljs, :target cljs.core.typed} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect.gen-datatype} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.subtype} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.base-env-helper-cljs} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect.gen-protocol} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.fold} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.if} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.analyze-cljs} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.set-bang} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.do} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.recur} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.let} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.map} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.letfn} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.fn-method-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.vector} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.var-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.subtype} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.tc-ignore} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.print-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.inst} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.fn} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.set} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.loop} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check-below} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.loop} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.dot-cljs} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.def} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.local-result} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.ann-form} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.fn} {:source clojure.core.typed.analyze-cljs, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer} {:source clojure.core.typed.analyze-cljs, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic} {:source clojure.core.typed.analyze-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.repl, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.repl, :target clojure.core.typed.load} {:source clojure.core.typed.repl, :target clojure.core.typed} {:source clojure.core.typed.repl, :target clojure.core.typed.errors} {:source clojure.core.typed.repl, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.repl, :target clojure.core.typed.current-impl} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.load, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.load, :target clojure.core.typed.check-form-common} {:source clojure.core.typed.load, :target clojure.core.typed} {:source clojure.core.typed.load, :target clojure.core.typed.errors} {:source clojure.core.typed.load, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm} {:source clojure.core.typed.load, :target clojure.core.typed.check-form-clj} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.load, :target clojure.core.typed.current-impl} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.privatevars, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.tail-recursion, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source cljs.core.typed.async, :target cljs.core.typed} {:source cljs.core.typed, :target clojure.core.typed.internal} {:source cljs.core.typed, :target clojure.core.typed.load-if-needed} {:source cljs.core.typed, :target clojure.core.typed.macros} {:source cljs.core.typed, :target clojure.core.typed.import-macros} {:source cljs.core.typed, :target clojure.core.typed.errors} {:source cljs.core.typed, :target clojure.core.typed.current-impl} {:source cljs.core.typed, :target clojure.core.typed.util-vars} {:source cljs.core.typed, :target clojure.core.typed.special-form} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.docstring, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.reflection, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.hole, :target clojure.core.typed} {:source clojure.core.typed.type-contract, :target clojure.core.typed.ast-ops} {:source clojure.core.typed.type-contract, :target clojure.core.typed.errors} {:source clojure.core.typed.type-contract, :target clojure.core.typed.parse-ast} {:source clojure.core.typed.type-contract, :target clojure.core.typed.current-impl} {:source clojure.core.typed.ast-ops, :target clojure.core.typed.errors} {:source clojure.core.typed.ast-ops, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.free-ops} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.name-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.util-cljs, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.util-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.deps.clojure.tools.namespace.repl, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.deps.clojure.tools.namespace.repl, :target clojure.core.typed.deps.clojure.tools.namespace.reload} {:source clojure.core.typed.deps.clojure.tools.namespace.repl, :target clojure.core.typed.deps.clojure.tools.namespace.dir} {:source clojure.core.typed.deps.clojure.tools.namespace.reload, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.parse-ast, :target clojure.core.typed} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.errors} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.current-impl} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.util-vars} {:source clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer} {:source clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.fold} {:source clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.check-form-common} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.check} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.reset-caches} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.file-mapping} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.errors} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.check} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.utils} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.profiling} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.util-vars} {:source clojure.core.typed.deps.clojure.tools.analyzer.ast.query, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.ast.query, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.async, :target clojure.core.typed} {:source clojure.core.typed.async, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.statistics, :target clojure.core.typed.var-env} {:source clojure.core.typed.statistics, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.statistics, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.statistics, :target clojure.core.typed.util-vars} {:source clojure.core.typed.statistics, :target clojure.core.typed.check-ns-clj} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader.impl.commons} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.util} {:source clojure.core.typed.contrib-annotations, :target clojure.core.typed} {:source clojure.core.typed.check-ns-clj, :target clojure.core.typed.errors} {:source clojure.core.typed.check-ns-clj, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-ns-clj, :target clojure.core.typed.check-ns-common} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.reset-caches} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.file-mapping} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.var-env} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.errors} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.check} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.profiling} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.reset-env} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.util-vars} {:source clojure.core.typed.reset-caches, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.reset-caches, :target clojure.core.typed.subtype} {:source clojure.core.typed.reset-caches, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.type-rep} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.file-mapping, :target clojure.core.typed} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.check.utils} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.utils} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.check, :target clojure.core.typed.check.if} {:source clojure.core.typed.check, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.method} {:source clojure.core.typed.check, :target clojure.core.typed.check.catch} {:source clojure.core.typed.check, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.set-bang} {:source clojure.core.typed.check, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.do} {:source clojure.core.typed.check, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.check, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check, :target clojure.core.typed.check.recur} {:source clojure.core.typed.check, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.check, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.check, :target clojure.core.typed.check.let} {:source clojure.core.typed.check, :target clojure.core.typed.check.map} {:source clojure.core.typed.check, :target clojure.core.typed.check.letfn} {:source clojure.core.typed.check, :target clojure.core.typed.subst-obj} {:source clojure.core.typed.check, :target clojure.core.typed.check.fn-methods} {:source clojure.core.typed.check, :target clojure.core.typed.check.nth} {:source clojure.core.typed.check, :target clojure.core.typed.check.fn-method-utils} {:source clojure.core.typed.check, :target clojure.core.typed.check.nthnext} {:source clojure.core.typed.check, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.check, :target clojure.core.typed.check.monitor} {:source clojure.core.typed.check, :target clojure.core.typed.reflect-utils} {:source clojure.core.typed.check, :target clojure.core.typed} {:source clojure.core.typed.check, :target clojure.core.typed.tvar-env} {:source clojure.core.typed.check, :target clojure.core.typed.frees} {:source clojure.core.typed.check, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check, :target clojure.core.typed.update} {:source clojure.core.typed.check, :target clojure.core.typed.check.vector} {:source clojure.core.typed.check, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check, :target clojure.core.typed.var-env} {:source clojure.core.typed.check, :target clojure.core.typed.errors} {:source clojure.core.typed.check, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check, :target clojure.core.typed.abo} {:source clojure.core.typed.check, :target clojure.core.typed.check.invoke} {:source clojure.core.typed.check, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.check, :target clojure.core.typed.ctor-override-env} {:source clojure.core.typed.check, :target clojure.core.typed.subtype} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.tc-ignore} {:source clojure.core.typed.check, :target clojure.core.typed.check.multi-utils} {:source clojure.core.typed.check, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check, :target clojure.core.typed.ns-options} {:source clojure.core.typed.check, :target clojure.core.typed.utils} {:source clojure.core.typed.check, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check, :target clojure.core.typed.check.get} {:source clojure.core.typed.check, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.check, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check, :target clojure.core.typed.assoc-utils} {:source clojure.core.typed.check, :target clojure.core.typed.check.print-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.multi} {:source clojure.core.typed.check, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.check, :target clojure.core.typed.inst} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.fn} {:source clojure.core.typed.check, :target clojure.core.typed.check.case} {:source clojure.core.typed.check, :target clojure.core.typed.profiling} {:source clojure.core.typed.check, :target clojure.core.typed.subst} {:source clojure.core.typed.check, :target clojure.core.typed.tc-equiv} {:source clojure.core.typed.check, :target clojure.core.typed.filter-protocols} {:source clojure.core.typed.check, :target clojure.core.typed.check.apply} {:source clojure.core.typed.check, :target clojure.core.typed.check.set} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.loop} {:source clojure.core.typed.check, :target clojure.core.typed.mm-env} {:source clojure.core.typed.check, :target clojure.core.typed.check-below} {:source clojure.core.typed.check, :target clojure.core.typed.check.loop} {:source clojure.core.typed.check, :target clojure.core.typed.check.type-hints} {:source clojure.core.typed.check, :target clojure.core.typed.open-result} {:source clojure.core.typed.check, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check, :target clojure.core.typed.check.value} {:source clojure.core.typed.check, :target clojure.core.typed.check.def} {:source clojure.core.typed.check, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check, :target clojure.core.typed.check.tag} {:source clojure.core.typed.check, :target clojure.core.typed.array-ops} {:source clojure.core.typed.check, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.check, :target clojure.core.typed.method-param-nilables} {:source clojure.core.typed.check, :target clojure.core.typed.check.isa} {:source clojure.core.typed.check, :target clojure.core.typed.check.invoke-kw} {:source clojure.core.typed.check, :target clojure.core.typed.check.try} {:source clojure.core.typed.check, :target clojure.core.typed.local-result} {:source clojure.core.typed.check, :target clojure.core.typed.special-form} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.ann-form} {:source clojure.core.typed.check, :target clojure.core.typed.method-return-nilables} {:source clojure.core.typed.check, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.check, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.check, :target clojure.core.typed.debug} {:source clojure.core.typed.check, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check, :target clojure.core.typed.check.fn} {:source clojure.core.typed.check, :target clojure.core.typed.check.cli} {:source clojure.core.typed.check.if, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.if, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.if, :target clojure.core.typed.update} {:source clojure.core.typed.check.if, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.if, :target clojure.core.typed.errors} {:source clojure.core.typed.check.if, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.if, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.if, :target clojure.core.typed.utils} {:source clojure.core.typed.check.if, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.if, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.if, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.if, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.if, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.catch, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.catch, :target clojure.core.typed.errors} {:source clojure.core.typed.check.catch, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.catch, :target clojure.core.typed.utils} {:source clojure.core.typed.check.catch, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.catch, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.errors} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.utils} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.do, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.do, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.do, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.update} {:source clojure.core.typed.check.do, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.do, :target clojure.core.typed.errors} {:source clojure.core.typed.check.do, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.do, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.do, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.do, :target clojure.core.typed.special-form} {:source clojure.core.typed.check.recur, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.recur, :target clojure.core.typed.errors} {:source clojure.core.typed.check.recur, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.recur, :target clojure.core.typed.utils} {:source clojure.core.typed.check.recur, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.recur, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.recur, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.map, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.map, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.map, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.map, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.map, :target clojure.core.typed.utils} {:source clojure.core.typed.check.map, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.map, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.map, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.errors} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.utils} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.nth, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.nth, :target clojure.core.typed.check.method} {:source clojure.core.typed.check.nth, :target clojure.core.typed} {:source clojure.core.typed.check.nth, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.nth, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.nth, :target clojure.core.typed.errors} {:source clojure.core.typed.check.nth, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.nth, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.nth, :target clojure.core.typed.utils} {:source clojure.core.typed.check.nth, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.nth, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.nth, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.nth, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.nth, :target clojure.core.typed.debug} {:source clojure.core.typed.check.nth, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.method, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.method, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.method, :target clojure.core.typed.errors} {:source clojure.core.typed.check.method, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.method, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.method, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.method, :target clojure.core.typed.utils} {:source clojure.core.typed.check.method, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.method, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.method, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.check.method, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.method, :target clojure.core.typed.check.type-hints} {:source clojure.core.typed.check.method, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.utils} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.utils} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.vector, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.vector, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.vector, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.vector, :target clojure.core.typed.utils} {:source clojure.core.typed.check.vector, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.vector, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.invoke, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.invoke, :target clojure.core.typed.utils} {:source clojure.core.typed.ctor-override-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.ctor-override-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.get, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.get, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.get, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.get, :target clojure.core.typed.utils} {:source clojure.core.typed.check.get, :target clojure.core.typed.check.invoke-kw} {:source clojure.core.typed.check.multi, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.multi, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.inst, :target clojure.core.typed.type-rep} {:source clojure.core.typed.inst, :target clojure.core.typed.trans} {:source clojure.core.typed.inst, :target clojure.core.typed.errors} {:source clojure.core.typed.inst, :target clojure.core.typed.free-ops} {:source clojure.core.typed.inst, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.inst, :target clojure.core.typed.subtype} {:source clojure.core.typed.inst, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.inst, :target clojure.core.typed.utils} {:source clojure.core.typed.inst, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.inst, :target clojure.core.typed.subst} {:source clojure.core.typed.trans, :target clojure.core.typed.type-rep} {:source clojure.core.typed.trans, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.trans, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.trans, :target clojure.core.typed.utils} {:source clojure.core.typed.trans, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.trans, :target clojure.core.typed.subst} {:source clojure.core.typed.trans, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.fn-methods} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.fn-method-one} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.fn} {:source clojure.core.typed.check.case, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.case, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.case, :target clojure.core.typed.update} {:source clojure.core.typed.check.case, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.case, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.case, :target clojure.core.typed.utils} {:source clojure.core.typed.check.case, :target clojure.core.typed.tc-equiv} {:source clojure.core.typed.check.case, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.apply, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.apply, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.apply, :target clojure.core.typed.errors} {:source clojure.core.typed.check.apply, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.apply, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.apply, :target clojure.core.typed.utils} {:source clojure.core.typed.check.apply, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check.apply, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.apply, :target clojure.core.typed.subst} {:source clojure.core.typed.check.apply, :target clojure.core.typed.util-vars} {:source clojure.core.typed.reset-env, :target clojure.core.typed.ns-options} {:source clojure.core.typed.reset-env, :target clojure.core.typed.mm-env} {:source clojure.core.typed.reset-env, :target clojure.core.typed.base-env} {:source clojure.core.typed.reset-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.reset-env, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.check.set, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.set, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.set, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.set, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.set, :target clojure.core.typed.utils} {:source clojure.core.typed.check.set, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.set, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.set, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.set, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.mm-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.mm-env, :target clojure.core.typed.errors} {:source clojure.core.typed.mm-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.mm-env, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.mm-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.base-env, :target clojure.core.typed.base-env-helper} {:source clojure.core.typed.base-env, :target clojure.core.typed} {:source clojure.core.typed.base-env, :target clojure.core.typed.path-rep} {:source clojure.core.typed.base-env, :target clojure.core.typed.base-env-common} {:source clojure.core.typed.base-env, :target clojure.core.typed.fold-default} {:source clojure.core.typed.base-env, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env, :target clojure.core.typed.subst} {:source clojure.core.typed.base-env, :target clojure.core.typed.base-env-clj-rclass} {:source clojure.core.typed.base-env, :target clojure.core.typed.name-env} {:source clojure.core.typed.base-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env, :target clojure.core.typed.object-rep} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.base-env-helper} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.base-env-common} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.fold-default} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.type-rep} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.var-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.free-ops} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.utils} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.name-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.base-env-common, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.base-env-common, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env-common, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.fold-default, :target clojure.core.typed.type-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.path-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.free-ops} {:source clojure.core.typed.fold-default, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.fold-default, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.fold-default, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.object-rep} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.frees} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.check.utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.errors} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect.gen-datatype} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect.typed-deps} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.subtype} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ns-options} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.dependency} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.profiling} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.method-param-nilables} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.dir} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.method-return-nilables} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect.gen-protocol} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.frees} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.subtype} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.check.utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.errors} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.method-override-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.method-override-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.loop, :target clojure.core.typed.check.let} {:source clojure.core.typed.check.loop, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.let, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.let, :target clojure.core.typed.subst-obj} {:source clojure.core.typed.check.let, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.update} {:source clojure.core.typed.check.let, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.let, :target clojure.core.typed.errors} {:source clojure.core.typed.check.let, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.let, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.let, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.let, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.let, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.let, :target clojure.core.typed.check.print-env} {:source clojure.core.typed.check.let, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.let, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.let, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.tvar-env} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.reflect-utils} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.value, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.value, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.value, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.value, :target clojure.core.typed.constant-type} {:source clojure.core.typed.check.value, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.value, :target clojure.core.typed.utils} {:source clojure.core.typed.check.value, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.value, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.value, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.value, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.value, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.def, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.def, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.def, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.def, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.def, :target clojure.core.typed.ns-options} {:source clojure.core.typed.check.def, :target clojure.core.typed.utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.def, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.def, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.def, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.def, :target clojure.core.typed.util-vars} {:source clojure.core.typed.ns-options, :target clojure.core.typed} {:source clojure.core.typed.check.tag, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.check.tag, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.tag, :target clojure.core.typed.errors} {:source clojure.core.typed.check.tag, :target clojure.core.typed.util-vars} {:source clojure.core.typed.array-ops, :target clojure.core.typed.type-rep} {:source clojure.core.typed.array-ops, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.try, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.try, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.try, :target clojure.core.typed.utils} {:source clojure.core.typed.check.try, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.try, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.try, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.try, :target clojure.core.typed.object-rep} {:source clojure.core.typed.deps.clojure.tools.namespace.dir, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.deps.clojure.tools.namespace.dir, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.local-result, :target clojure.core.typed.type-rep} {:source clojure.core.typed.local-result, :target clojure.core.typed.lex-env} {:source clojure.core.typed.local-result, :target clojure.core.typed.check.utils} {:source clojure.core.typed.local-result, :target clojure.core.typed.path-rep} {:source clojure.core.typed.local-result, :target clojure.core.typed.var-env} {:source clojure.core.typed.local-result, :target clojure.core.typed.errors} {:source clojure.core.typed.local-result, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.local-result, :target clojure.core.typed.path-type} {:source clojure.core.typed.local-result, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.local-result, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.local-result, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.local-result, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.local-result, :target clojure.core.typed.check-below} {:source clojure.core.typed.local-result, :target clojure.core.typed.util-vars} {:source clojure.core.typed.local-result, :target clojure.core.typed.debug} {:source clojure.core.typed.local-result, :target clojure.core.typed.object-rep} {:source clojure.core.typed.path-type, :target clojure.core.typed.type-rep} {:source clojure.core.typed.path-type, :target clojure.core.typed} {:source clojure.core.typed.path-type, :target clojure.core.typed.check.utils} {:source clojure.core.typed.path-type, :target clojure.core.typed.path-rep} {:source clojure.core.typed.path-type, :target clojure.core.typed.errors} {:source clojure.core.typed.path-type, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.path-type, :target clojure.core.typed.subtype} {:source clojure.core.typed.path-type, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.path-type, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.object-rep} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.errors} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.collect-utils, :target clojure.core.typed} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.errors} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.fn, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn, :target clojure.core.typed.check.fn-methods} {:source clojure.core.typed.check.fn, :target clojure.core.typed} {:source clojure.core.typed.check.fn, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.fn, :target clojure.core.typed.utils} {:source clojure.core.typed.check.fn, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.fn, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.fn, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.errors} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.check.fn-method-one} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.fn-method-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.update} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.errors} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.multi-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.open-result} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.isa} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.abo} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.update, :target clojure.core.typed.type-rep} {:source clojure.core.typed.update, :target clojure.core.typed.lex-env} {:source clojure.core.typed.update, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.update, :target clojure.core.typed.check.utils} {:source clojure.core.typed.update, :target clojure.core.typed.path-rep} {:source clojure.core.typed.update, :target clojure.core.typed.errors} {:source clojure.core.typed.update, :target clojure.core.typed.free-ops} {:source clojure.core.typed.update, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.update, :target clojure.core.typed.subtype} {:source clojure.core.typed.update, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.update, :target clojure.core.typed.utils} {:source clojure.core.typed.update, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.update, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.update, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.update, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.update, :target clojure.core.typed.profiling} {:source clojure.core.typed.update, :target clojure.core.typed.remove} {:source clojure.core.typed.var-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.var-env, :target clojure.core.typed.lex-env} {:source clojure.core.typed.var-env, :target clojure.core.typed} {:source clojure.core.typed.var-env, :target clojure.core.typed.errors} {:source clojure.core.typed.var-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.var-env, :target clojure.core.typed.env} {:source clojure.core.typed.var-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.var-env, :target clojure.core.typed.util-vars} {:source clojure.core.typed.lex-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.lex-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.lex-env, :target clojure.core.typed.utils} {:source clojure.core.typed.lex-env, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.lex-env, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.lex-env, :target clojure.core.typed.util-vars} {:source clojure.core.typed.lex-env, :target clojure.core.typed.object-rep} {:source clojure.core.typed.lex-env, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.funapp-one} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.frees} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.errors} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.subst} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.invoke-kw} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.app-error} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.errors} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.open-result} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.object-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.type-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.abo, :target clojure.core.typed.utils} {:source clojure.core.typed.abo, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.abo, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.multi-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.multi-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.remove, :target clojure.core.typed.type-rep} {:source clojure.core.typed.remove, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.remove, :target clojure.core.typed.subtype} {:source clojure.core.typed.open-result, :target clojure.core.typed.type-rep} {:source clojure.core.typed.open-result, :target clojure.core.typed.subst-obj} {:source clojure.core.typed.open-result, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.open-result, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.open-result, :target clojure.core.typed.object-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.type-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.free-in} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.errors} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.object-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.type-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.free-in, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed} {:source clojure.core.typed.check.isa, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.isa, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.isa, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.isa, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.isa, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed.tc-equiv} {:source clojure.core.typed.check.isa, :target clojure.core.typed.filter-protocols} {:source clojure.core.typed.check.isa, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.isa, :target clojure.core.typed.object-rep} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.type-rep} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.check-below} {:source clojure.core.typed.filter-protocols, :target clojure.core.typed} {:source clojure.core.typed.filter-protocols, :target clojure.core.typed.utils} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.errors} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.utils} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check-below, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check-below, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check-below, :target clojure.core.typed.errors} {:source clojure.core.typed.check-below, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check-below, :target clojure.core.typed.subtype} {:source clojure.core.typed.check-below, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-below, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check-below, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check-below, :target clojure.core.typed.debug} {:source clojure.core.typed.check-below, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.recur-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.recur-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.errors} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.utils, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.check.utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.utils, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.check.utils, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.reflect-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed} {:source clojure.core.typed.check.utils, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.utils, :target clojure.core.typed.errors} {:source clojure.core.typed.check.utils, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.utils, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.utils, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.check.utils, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.utils, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.utils, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.utils, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.utils, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.check.utils, :target clojure.core.typed.method-param-nilables} {:source clojure.core.typed.check.utils, :target clojure.core.typed.method-return-nilables} {:source clojure.core.typed.check.utils, :target clojure.core.typed.debug} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.errors} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.trim} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.util-vars} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.special-form} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.errors} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.deps.clojure.tools.namespace.file, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.deps.clojure.tools.namespace.file, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.deps.clojure.tools.namespace.track, :target clojure.core.typed.deps.clojure.tools.namespace.dependency} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.trim} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.warn-earmuff} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.core.memoize} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.warn-earmuff, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.default-data-readers} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.impl.commons} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.reader.impl.commons, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader.impl.commons, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.emit-form} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.emit-form, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.ns-deps, :target clojure.core.typed} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.nilsafe-utils} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.env} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.current-impl} {:source clojure.core.typed.method-param-nilables, :target clojure.core.typed.type-rep} {:source clojure.core.typed.method-param-nilables, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.deps.clojure.tools.reader.reader-types, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader.impl.utils, :target clojure.core.typed.deps.clojure.tools.reader.impl.ExceptionInfo} {:source clojure.core.typed.method-return-nilables, :target clojure.core.typed.type-rep} {:source clojure.core.typed.method-return-nilables, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.fix-case-test} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.trim} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.fix-case-test, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.constant-lifter} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils, :target clojure.core.typed.deps.clojure.core.memoize} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.trim, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.trim, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.core.memoize, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.ast, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.utils, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.check.cli, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.cli, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.cli, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.cli, :target clojure.core.typed.constant-type} {:source clojure.core.typed.check.cli, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.cli, :target clojure.core.typed.utils} {:source clojure.core.typed.check.cli, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check.cli, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.cli, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.type-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.promote-demote} {:source clojure.core.typed.cs-gen, :target clojure.core.typed} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.frees} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.errors} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.free-ops} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.subtype} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.profiling} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.subst} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.current-impl} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.util-vars} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.object-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.type-rep} {:source clojure.core.typed.promote-demote, :target clojure.core.typed} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.frees} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.utils} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.subtype, :target clojure.core.typed.type-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.subtype, :target clojure.core.typed.type-protocols} {:source clojure.core.typed.subtype, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.frees} {:source clojure.core.typed.subtype, :target clojure.core.typed.path-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.errors} {:source clojure.core.typed.subtype, :target clojure.core.typed.free-ops} {:source clojure.core.typed.subtype, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.subtype, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.subtype, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.subtype, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.assoc-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.profiling} {:source clojure.core.typed.subtype, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.current-impl} {:source clojure.core.typed.subtype, :target clojure.core.typed.util-vars} {:source clojure.core.typed.subtype, :target clojure.core.typed.object-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.nilsafe-utils} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.utils} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.subst} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.env} {:source clojure.core.typed.type-protocols, :target clojure.core.typed} {:source clojure.core.typed.type-protocols, :target clojure.core.typed.utils} {:source clojure.core.typed.nilsafe-utils, :target clojure.core.typed} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.type-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.path-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.errors} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.free-ops} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.constant-type} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.name-env} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.current-impl} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.util-vars} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.object-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.constant-type, :target clojure.core.typed.type-rep} {:source clojure.core.typed.constant-type, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.constant-type, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.hset-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.errors} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.free-ops} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.subst, :target clojure.core.typed.type-rep} {:source clojure.core.typed.subst, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.subst, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.subst, :target clojure.core.typed} {:source clojure.core.typed.subst, :target clojure.core.typed.frees} {:source clojure.core.typed.subst, :target clojure.core.typed.errors} {:source clojure.core.typed.subst, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.subst, :target clojure.core.typed.utils} {:source clojure.core.typed.subst, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.subst, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.subst, :target clojure.core.typed.object-rep} {:source clojure.core.typed.frees, :target clojure.core.typed.type-rep} {:source clojure.core.typed.frees, :target clojure.core.typed} {:source clojure.core.typed.frees, :target clojure.core.typed.errors} {:source clojure.core.typed.frees, :target clojure.core.typed.free-ops} {:source clojure.core.typed.frees, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.frees, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.frees, :target clojure.core.typed.utils} {:source clojure.core.typed.frees, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.frees, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.frees, :target clojure.core.typed.name-env} {:source clojure.core.typed.frees, :target clojure.core.typed.current-impl} {:source clojure.core.typed.frees, :target clojure.core.typed.object-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.type-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.path-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.utils} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.profiling} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.debug} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.object-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.name-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.name-env, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.name-env, :target clojure.core.typed} {:source clojure.core.typed.name-env, :target clojure.core.typed.errors} {:source clojure.core.typed.name-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.name-env, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.name-env, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.utils} {:source clojure.core.typed.name-env, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.env} {:source clojure.core.typed.name-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.env} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.type-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.coerce-ann} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.indirect-ann} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.type-ctors, :target clojure.core.typed} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.path-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.errors} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.free-ops} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.utils} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.profiling} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.current-impl} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.util-vars} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.object-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.datatype-env, :target clojure.core.typed} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.errors} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.env} {:source clojure.core.typed.coerce-ann, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.coerce-ann, :target clojure.core.typed} {:source clojure.core.typed.cs-rep, :target clojure.core.typed.type-rep} {:source clojure.core.typed.cs-rep, :target clojure.core.typed} {:source clojure.core.typed.cs-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.cs-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.fold-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.indirect-ann, :target clojure.core.typed.type-rep} {:source clojure.core.typed.indirect-ann, :target clojure.core.typed} {:source clojure.core.typed.indirect-ann, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.protocol-env, :target clojure.core.typed} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.errors} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.errors-ann} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.contract-ann} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.env} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.util-vars} {:source clojure.core.typed.errors-ann, :target clojure.core.typed} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.errors} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.env} {:source clojure.core.typed.deps.clojure.core.cache, :target clojure.core.typed.deps.clojure.data.priority-map} {:source clojure.core.typed.rclass-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.rclass-env, :target clojure.core.typed.free-ops} {:source clojure.core.typed.rclass-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.free-ops, :target clojure.core.typed.type-rep} {:source clojure.core.typed.free-ops, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.free-ops, :target clojure.core.typed} {:source clojure.core.typed.free-ops, :target clojure.core.typed.tvar-env} {:source clojure.core.typed.free-ops, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.tvar-bnds, :target clojure.core.typed.type-rep} {:source clojure.core.typed.tvar-bnds, :target clojure.core.typed} {:source clojure.core.typed.tvar-bnds, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.tvar-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.tvar-env, :target clojure.core.typed} {:source clojure.core.typed.tvar-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.dvar-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.dvar-env, :target clojure.core.typed} {:source clojure.core.typed.dvar-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.type-rep} {:source clojure.core.typed.object-rep, :target clojure.core.typed} {:source clojure.core.typed.object-rep, :target clojure.core.typed.path-rep} {:source clojure.core.typed.object-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.object-rep, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.object-rep, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.type-rep} {:source clojure.core.typed.filter-rep, :target clojure.core.typed} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.path-rep} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.type-rep, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.type-rep, :target clojure.core.typed} {:source clojure.core.typed.type-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.type-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.type-rep, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.type-rep, :target clojure.core.typed.contract-ann} {:source clojure.core.typed.type-rep, :target clojure.core.typed.current-impl} {:source clojure.core.typed.type-rep, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.path-rep, :target clojure.core.typed} {:source clojure.core.typed.path-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.path-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.utils, :target clojure.core.typed.deps.clojure.core.contracts} {:source clojure.core.typed.utils, :target clojure.core.typed} {:source clojure.core.typed.utils, :target clojure.core.typed.errors} {:source clojure.core.typed.utils, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.utils, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.utils, :target clojure.core.typed.deps.clojure.core.contracts.constraints} {:source clojure.core.typed.utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.utils, :target clojure.core.typed.util-vars} {:source clojure.core.typed.impl-protocols, :target clojure.core.typed} {:source clojure.core.typed.impl-protocols, :target clojure.core.typed.def-utils} {:source clojure.core.typed.def-utils, :target clojure.core.typed.deps.clojure.core.contracts.constraints} {:source clojure.core.typed.deps.clojure.core.contracts.constraints, :target clojure.core.typed.deps.clojure.core.contracts} {:source clojure.core.typed.deps.clojure.core.contracts.constraints, :target clojure.core.typed.deps.clojure.core.contracts.impl.transformers} {:source clojure.core.typed.deps.clojure.core.contracts.constraints, :target clojure.core.typed.deps.clojure.core.contracts.impl.utils} {:source clojure.core.typed.deps.clojure.core.contracts, :target clojure.core.typed.deps.clojure.core.contracts.impl.transformers} {:source clojure.core.typed.deps.clojure.core.contracts, :target clojure.core.typed.deps.clojure.core.contracts.impl.utils} {:source clojure.core.typed.deps.clojure.core.contracts.impl.transformers, :target clojure.core.typed.deps.clojure.core.contracts.impl.utils} {:source clojure.core.typed.deps.clojure.core.contracts.impl.transformers, :target clojure.core.typed.deps.clojure.core.unify} {:source clojure.core.typed.deps.clojure.core.contracts.impl.transformers, :target clojure.core.typed.deps.clojure.core.contracts.impl.funcify} {:source clojure.core.typed.deps.clojure.core.contracts.impl.utils, :target clojure.core.typed.deps.clojure.core.unify} {:source clojure.core.typed.contract-ann, :target clojure.core.typed} {:source clojure.core.typed, :target clojure.core.typed.internal} {:source clojure.core.typed, :target clojure.core.typed.load-if-needed} {:source clojure.core.typed, :target clojure.core.typed.macros} {:source clojure.core.typed, :target clojure.core.typed.import-macros} {:source clojure.core.typed, :target clojure.core.typed.errors} {:source clojure.core.typed, :target clojure.core.typed.profiling} {:source clojure.core.typed, :target clojure.core.typed.current-impl} {:source clojure.core.typed, :target clojure.core.typed.util-vars} {:source clojure.core.typed, :target clojure.core.typed.special-form} {:source clojure.core.typed.load-if-needed, :target clojure.core.typed.errors} {:source clojure.core.typed.load-if-needed, :target clojure.core.typed.util-vars} {:source clojure.core.typed.macros, :target clojure.core.typed.internal} {:source clojure.core.typed.macros, :target clojure.core.typed.errors} {:source clojure.core.typed.macros, :target clojure.core.typed.util-vars} {:source clojure.core.typed.macros, :target clojure.core.typed.special-form} {:source clojure.core.typed.internal, :target clojure.core.typed.errors} {:source clojure.core.typed.internal, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.errors, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.errors, :target clojure.core.typed.current-impl} {:source clojure.core.typed.errors, :target clojure.core.typed.util-vars} {:source clojure.core.typed.ast-utils, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.ast-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.ast-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.coerce-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.current-impl, :target clojure.core.typed.profiling} {:source clojure.core.typed.current-impl, :target clojure.core.typed.env} {:source clojure.core.typed.indirect-ops, :target clojure.core.typed.indirect-utils}], :nodes [{:name "clojure.core.typed.init"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.dynvars"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.nsforms"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.load-core"} {:name "clojure.core.typed.rclass-ancestor-env"} {:name "clojure.core.typed.base-env-cljs"} {:name "clojure.core.typed.deps.clojure.tools.namespace.find"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.side-effect"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-loops"} {:name "clojure.core.typed.all-envs"} {:name "clojure.core.typed.check-ns-cljs"} {:name "clojure.core.typed.check-form-cljs"} {:name "clojure.core.typed.collect-cljs"} {:name "clojure.core.typed.deps.clojure.tools.namespace.move"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic"} {:name "clojure.core.typed.check-cljs"} {:name "clojure.core.typed.analyze-cljs"} {:name "clojure.core.typed.repl"} {:name "clojure.core.typed.load"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.privatevars"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.tail-recursion"} {:name "cljs.core.typed.async"} {:name "cljs.core.typed"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.docstring"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.reflection"} {:name "clojure.core.typed.bootstrap-cljs"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs"} {:name "clojure.core.typed.deps.clojure.tools.namespace"} {:name "clojure.core.typed.hole"} {:name "clojure.core.typed.type-contract"} {:name "clojure.core.typed.ast-ops"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.fold"} {:name "clojure.core.typed.base-env-helper-cljs"} {:name "clojure.core.typed.util-cljs"} {:name "clojure.core.typed.deps.clojure.tools.namespace.repl"} {:name "clojure.core.typed.deps.clojure.tools.namespace.reload"} {:name "clojure.core.typed.parse-ast"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer.fold"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer.emit-form"} {:name "clojure.core.typed.check-form-clj"} {:name "clojure.core.typed.check-form-common"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.ast.query"} {:name "clojure.core.typed.async"} {:name "clojure.core.typed.check.dot-cljs"} {:name "clojure.core.typed.statistics"} {:name "clojure.core.typed.deps.clojure.tools.reader.edn"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.emit-form"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.util"} {:name "clojure.core.typed.contrib-annotations"} {:name "clojure.core.typed.check-ns-clj"} {:name "clojure.core.typed.check-ns-common"} {:name "clojure.core.typed.reset-caches"} {:name "clojure.core.typed.file-mapping"} {:name "clojure.core.typed.check"} {:name "clojure.core.typed.check.if"} {:name "clojure.core.typed.check.catch"} {:name "clojure.core.typed.check.set-bang"} {:name "clojure.core.typed.check.do"} {:name "clojure.core.typed.check.recur"} {:name "clojure.core.typed.check.map"} {:name "clojure.core.typed.check.letfn"} {:name "clojure.core.typed.check.nth"} {:name "clojure.core.typed.check.method"} {:name "clojure.core.typed.check.nthnext"} {:name "clojure.core.typed.check.monitor"} {:name "clojure.core.typed.check.vector"} {:name "clojure.core.typed.check.invoke"} {:name "clojure.core.typed.ctor-override-env"} {:name "clojure.core.typed.check.special.tc-ignore"} {:name "clojure.core.typed.check.get"} {:name "clojure.core.typed.check.multi"} {:name "clojure.core.typed.inst"} {:name "clojure.core.typed.trans"} {:name "clojure.core.typed.check.special.fn"} {:name "clojure.core.typed.check.case"} {:name "clojure.core.typed.check.apply"} {:name "clojure.core.typed.reset-env"} {:name "clojure.core.typed.check.set"} {:name "clojure.core.typed.check.special.loop"} {:name "clojure.core.typed.mm-env"} {:name "clojure.core.typed.base-env"} {:name "clojure.core.typed.base-env-clj-rclass"} {:name "clojure.core.typed.base-env-helper"} {:name "clojure.core.typed.base-env-common"} {:name "clojure.core.typed.fold-default"} {:name "clojure.core.typed.collect-phase"} {:name "clojure.core.typed.collect.gen-datatype"} {:name "clojure.core.typed.collect.typed-deps"} {:name "clojure.core.typed.method-override-env"} {:name "clojure.core.typed.check.loop"} {:name "clojure.core.typed.check.let"} {:name "clojure.core.typed.check.print-env"} {:name "clojure.core.typed.check.type-hints"} {:name "clojure.core.typed.check.value"} {:name "clojure.core.typed.check.def"} {:name "clojure.core.typed.ns-options"} {:name "clojure.core.typed.check.tag"} {:name "clojure.core.typed.array-ops"} {:name "clojure.core.typed.check.try"} {:name "clojure.core.typed.deps.clojure.tools.namespace.dir"} {:name "clojure.core.typed.local-result"} {:name "clojure.core.typed.path-type"} {:name "clojure.core.typed.check.special.ann-form"} {:name "clojure.core.typed.collect.gen-protocol"} {:name "clojure.core.typed.collect-utils"} {:name "clojure.core.typed.check.fn"} {:name "clojure.core.typed.check.fn-methods"} {:name "clojure.core.typed.check.fn-method-one"} {:name "clojure.core.typed.check.fn-method-utils"} {:name "clojure.core.typed.update"} {:name "clojure.core.typed.var-env"} {:name "clojure.core.typed.lex-env"} {:name "clojure.core.typed.check.funapp"} {:name "clojure.core.typed.check.funapp-one"} {:name "clojure.core.typed.abo"} {:name "clojure.core.typed.check.multi-utils"} {:name "clojure.core.typed.remove"} {:name "clojure.core.typed.open-result"} {:name "clojure.core.typed.subst-obj"} {:name "clojure.core.typed.free-in"} {:name "clojure.core.typed.check.isa"} {:name "clojure.core.typed.tc-equiv"} {:name "clojure.core.typed.filter-protocols"} {:name "clojure.core.typed.check.invoke-kw"} {:name "clojure.core.typed.check-below"} {:name "clojure.core.typed.check.recur-utils"} {:name "clojure.core.typed.check.app-error"} {:name "clojure.core.typed.check.utils"} {:name "clojure.core.typed.analyze-clj"} {:name "clojure.core.typed.reflect-utils"} {:name "clojure.core.typed.ns-deps-utils"} {:name "clojure.core.typed.deps.clojure.tools.namespace.file"} {:name "clojure.core.typed.deps.clojure.tools.namespace.track"} {:name "clojure.core.typed.deps.clojure.tools.namespace.dependency"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.jvm"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.warn-earmuff"} {:name "clojure.core.typed.deps.clojure.tools.reader"} {:name "clojure.core.typed.deps.clojure.tools.reader.default-data-readers"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes"} {:name "clojure.core.typed.deps.clojure.tools.reader.impl.commons"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.emit-form"} {:name "clojure.core.typed.deps.clojure.tools.namespace.parse"} {:name "clojure.core.typed.ns-deps"} {:name "clojure.core.typed.method-param-nilables"} {:name "clojure.core.typed.deps.clojure.tools.reader.reader-types"} {:name "clojure.core.typed.deps.clojure.tools.reader.impl.utils"} {:name "clojure.core.typed.deps.clojure.tools.reader.impl.ExceptionInfo"} {:name "clojure.core.typed.method-return-nilables"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.fix-case-test"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.constant-lifter"} {:name "clojure.core.typed.deps.clojure.tools.analyzer"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.trim"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info"} {:name "clojure.core.typed.deps.clojure.core.memoize"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.ast"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.utils"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.env"} {:name "clojure.core.typed.check.cli"} {:name "clojure.core.typed.cs-gen"} {:name "clojure.core.typed.promote-demote"} {:name "clojure.core.typed.subtype"} {:name "clojure.core.typed.datatype-ancestor-env"} {:name "clojure.core.typed.type-protocols"} {:name "clojure.core.typed.nilsafe-utils"} {:name "clojure.core.typed.parse-unparse"} {:name "clojure.core.typed.constant-type"} {:name "clojure.core.typed.hset-utils"} {:name "clojure.core.typed.assoc-utils"} {:name "clojure.core.typed.subst"} {:name "clojure.core.typed.frees"} {:name "clojure.core.typed.filter-ops"} {:name "clojure.core.typed.name-env"} {:name "clojure.core.typed.jsnominal-env"} {:name "clojure.core.typed.type-ctors"} {:name "clojure.core.typed.datatype-env"} {:name "clojure.core.typed.deps.clojure.math.combinatorics"} {:name "clojure.core.typed.coerce-ann"} {:name "clojure.core.typed.cs-rep"} {:name "clojure.core.typed.fold-rep"} {:name "clojure.core.typed.indirect-ann"} {:name "clojure.core.typed.protocol-env"} {:name "clojure.core.typed.errors-ann"} {:name "clojure.core.typed.declared-kind-env"} {:name "clojure.core.typed.deps.clojure.core.cache"} {:name "clojure.core.typed.deps.clojure.data.priority-map"} {:name "clojure.core.typed.rclass-env"} {:name "clojure.core.typed.free-ops"} {:name "clojure.core.typed.tvar-bnds"} {:name "clojure.core.typed.tvar-env"} {:name "clojure.core.typed.dvar-env"} {:name "clojure.core.typed.debug"} {:name "clojure.core.typed.object-rep"} {:name "clojure.core.typed.filter-rep"} {:name "clojure.core.typed.type-rep"} {:name "clojure.core.typed.path-rep"} {:name "clojure.core.typed.utils"} {:name "clojure.core.typed.impl-protocols"} {:name "clojure.core.typed.def-utils"} {:name "clojure.core.typed.deps.clojure.core.contracts.constraints"} {:name "clojure.core.typed.deps.clojure.core.contracts"} {:name "clojure.core.typed.deps.clojure.core.contracts.impl.transformers"} {:name "clojure.core.typed.deps.clojure.core.contracts.impl.utils"} {:name "clojure.core.typed.deps.clojure.core.unify"} {:name "clojure.core.typed.deps.clojure.core.contracts.impl.funcify"} {:name "clojure.core.typed.contract-ann"} {:name "clojure.core.typed"} {:name "clojure.core.typed.load-if-needed"} {:name "clojure.core.typed.macros"} {:name "clojure.core.typed.internal"} {:name "clojure.core.typed.import-macros"} {:name "clojure.core.typed.errors"} {:name "clojure.core.typed.ast-utils"} {:name "clojure.core.typed.coerce-utils"} {:name "clojure.core.typed.contract-utils"} {:name "clojure.core.typed.current-impl"} {:name "clojure.core.typed.profiling"} {:name "clojure.core.typed.env"} {:name "clojure.core.typed.util-vars"} {:name "clojure.core.typed.special-form"} {:name "clojure.core.typed.indirect-ops"} {:name "clojure.core.typed.indirect-utils"}]}}:graph {:edges [{:source clojure.core.typed.init, :target clojure.core.typed.profiling} {:source clojure.core.typed.init, :target clojure.core.typed.current-impl} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.dynvars, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.nsforms, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.load-core, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.utils} {:source clojure.core.typed.rclass-ancestor-env, :target clojure.core.typed.subst} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.base-env-common} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.bootstrap-cljs} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.base-env-helper-cljs} {:source clojure.core.typed.base-env-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.deps.clojure.tools.namespace.find, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.deps.clojure.tools.namespace.find, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.side-effect, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-loops, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.all-envs, :target clojure.core.typed.var-env} {:source clojure.core.typed.all-envs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.all-envs, :target clojure.core.typed.name-env} {:source clojure.core.typed.all-envs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.all-envs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.reset-caches} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.collect-cljs} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.check-cljs} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.reset-env} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check-ns-cljs, :target clojure.core.typed.check-ns-common} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.analyze-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.collect-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.check-form-common} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.check-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.check-form-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.analyze-cljs} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.check.utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect-cljs, :target cljs.core.typed} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect.gen-datatype} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.subtype} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.base-env-helper-cljs} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect-cljs, :target clojure.core.typed.collect.gen-protocol} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.fold} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.if} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.analyze-cljs} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.set-bang} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.do} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.recur} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.let} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.map} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.letfn} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.fn-method-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.vector} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.var-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.subtype} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.tc-ignore} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.print-env} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.inst} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.fn} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.set} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.loop} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check-below} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.loop} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.dot-cljs} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.def} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.local-result} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.special.ann-form} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check-cljs, :target clojure.core.typed.check.fn} {:source clojure.core.typed.analyze-cljs, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer} {:source clojure.core.typed.analyze-cljs, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic} {:source clojure.core.typed.analyze-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.repl, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.repl, :target clojure.core.typed.load} {:source clojure.core.typed.repl, :target clojure.core.typed} {:source clojure.core.typed.repl, :target clojure.core.typed.errors} {:source clojure.core.typed.repl, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.repl, :target clojure.core.typed.current-impl} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.repl, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.load, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.load, :target clojure.core.typed.check-form-common} {:source clojure.core.typed.load, :target clojure.core.typed} {:source clojure.core.typed.load, :target clojure.core.typed.errors} {:source clojure.core.typed.load, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm} {:source clojure.core.typed.load, :target clojure.core.typed.check-form-clj} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.load, :target clojure.core.typed.current-impl} {:source clojure.core.typed.load, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.privatevars, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.tail-recursion, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source cljs.core.typed.async, :target cljs.core.typed} {:source cljs.core.typed, :target clojure.core.typed.internal} {:source cljs.core.typed, :target clojure.core.typed.load-if-needed} {:source cljs.core.typed, :target clojure.core.typed.macros} {:source cljs.core.typed, :target clojure.core.typed.import-macros} {:source cljs.core.typed, :target clojure.core.typed.errors} {:source cljs.core.typed, :target clojure.core.typed.current-impl} {:source cljs.core.typed, :target clojure.core.typed.util-vars} {:source cljs.core.typed, :target clojure.core.typed.special-form} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.docstring, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.reflection, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.hole, :target clojure.core.typed} {:source clojure.core.typed.type-contract, :target clojure.core.typed.ast-ops} {:source clojure.core.typed.type-contract, :target clojure.core.typed.errors} {:source clojure.core.typed.type-contract, :target clojure.core.typed.parse-ast} {:source clojure.core.typed.type-contract, :target clojure.core.typed.current-impl} {:source clojure.core.typed.ast-ops, :target clojure.core.typed.errors} {:source clojure.core.typed.ast-ops, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.free-ops} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.util-cljs} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.name-env} {:source clojure.core.typed.base-env-helper-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.util-cljs, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.util-cljs, :target clojure.core.typed.current-impl} {:source clojure.core.typed.deps.clojure.tools.namespace.repl, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.deps.clojure.tools.namespace.repl, :target clojure.core.typed.deps.clojure.tools.namespace.reload} {:source clojure.core.typed.deps.clojure.tools.namespace.repl, :target clojure.core.typed.deps.clojure.tools.namespace.dir} {:source clojure.core.typed.deps.clojure.tools.namespace.reload, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.parse-ast, :target clojure.core.typed} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.errors} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.current-impl} {:source clojure.core.typed.parse-ast, :target clojure.core.typed.util-vars} {:source clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer} {:source clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.fold} {:source clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic, :target clojure.core.typed.deps.cljs.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.check-form-common} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.check} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.check-form-clj, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.reset-caches} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.file-mapping} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.errors} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.check} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.utils} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.profiling} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-form-common, :target clojure.core.typed.util-vars} {:source clojure.core.typed.deps.clojure.tools.analyzer.ast.query, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.ast.query, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.async, :target clojure.core.typed} {:source clojure.core.typed.async, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.errors} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.utils} {:source clojure.core.typed.check.dot-cljs, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.statistics, :target clojure.core.typed.var-env} {:source clojure.core.typed.statistics, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.statistics, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.statistics, :target clojure.core.typed.util-vars} {:source clojure.core.typed.statistics, :target clojure.core.typed.check-ns-clj} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader.impl.commons} {:source clojure.core.typed.deps.clojure.tools.reader.edn, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.emit-form} {:source clojure.core.typed.deps.clojure.jvm.tools.analyzer, :target clojure.core.typed.deps.clojure.jvm.tools.analyzer.util} {:source clojure.core.typed.contrib-annotations, :target clojure.core.typed} {:source clojure.core.typed.check-ns-clj, :target clojure.core.typed.errors} {:source clojure.core.typed.check-ns-clj, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-ns-clj, :target clojure.core.typed.check-ns-common} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.reset-caches} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.file-mapping} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.var-env} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.errors} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.check} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.profiling} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.reset-env} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check-ns-common, :target clojure.core.typed.util-vars} {:source clojure.core.typed.reset-caches, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.reset-caches, :target clojure.core.typed.subtype} {:source clojure.core.typed.reset-caches, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.type-rep} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.file-mapping, :target clojure.core.typed} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.check.utils} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.utils} {:source clojure.core.typed.file-mapping, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.check, :target clojure.core.typed.check.if} {:source clojure.core.typed.check, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.method} {:source clojure.core.typed.check, :target clojure.core.typed.check.catch} {:source clojure.core.typed.check, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.set-bang} {:source clojure.core.typed.check, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.do} {:source clojure.core.typed.check, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.check, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check, :target clojure.core.typed.check.recur} {:source clojure.core.typed.check, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.check, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.check, :target clojure.core.typed.check.let} {:source clojure.core.typed.check, :target clojure.core.typed.check.map} {:source clojure.core.typed.check, :target clojure.core.typed.check.letfn} {:source clojure.core.typed.check, :target clojure.core.typed.subst-obj} {:source clojure.core.typed.check, :target clojure.core.typed.check.fn-methods} {:source clojure.core.typed.check, :target clojure.core.typed.check.nth} {:source clojure.core.typed.check, :target clojure.core.typed.check.fn-method-utils} {:source clojure.core.typed.check, :target clojure.core.typed.check.nthnext} {:source clojure.core.typed.check, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.check, :target clojure.core.typed.check.monitor} {:source clojure.core.typed.check, :target clojure.core.typed.reflect-utils} {:source clojure.core.typed.check, :target clojure.core.typed} {:source clojure.core.typed.check, :target clojure.core.typed.tvar-env} {:source clojure.core.typed.check, :target clojure.core.typed.frees} {:source clojure.core.typed.check, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check, :target clojure.core.typed.update} {:source clojure.core.typed.check, :target clojure.core.typed.check.vector} {:source clojure.core.typed.check, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check, :target clojure.core.typed.var-env} {:source clojure.core.typed.check, :target clojure.core.typed.errors} {:source clojure.core.typed.check, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check, :target clojure.core.typed.abo} {:source clojure.core.typed.check, :target clojure.core.typed.check.invoke} {:source clojure.core.typed.check, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.check, :target clojure.core.typed.ctor-override-env} {:source clojure.core.typed.check, :target clojure.core.typed.subtype} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.tc-ignore} {:source clojure.core.typed.check, :target clojure.core.typed.check.multi-utils} {:source clojure.core.typed.check, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check, :target clojure.core.typed.ns-options} {:source clojure.core.typed.check, :target clojure.core.typed.utils} {:source clojure.core.typed.check, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check, :target clojure.core.typed.check.get} {:source clojure.core.typed.check, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.check, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check, :target clojure.core.typed.assoc-utils} {:source clojure.core.typed.check, :target clojure.core.typed.check.print-env} {:source clojure.core.typed.check, :target clojure.core.typed.check.multi} {:source clojure.core.typed.check, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.check, :target clojure.core.typed.inst} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.fn} {:source clojure.core.typed.check, :target clojure.core.typed.check.case} {:source clojure.core.typed.check, :target clojure.core.typed.profiling} {:source clojure.core.typed.check, :target clojure.core.typed.subst} {:source clojure.core.typed.check, :target clojure.core.typed.tc-equiv} {:source clojure.core.typed.check, :target clojure.core.typed.filter-protocols} {:source clojure.core.typed.check, :target clojure.core.typed.check.apply} {:source clojure.core.typed.check, :target clojure.core.typed.check.set} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.loop} {:source clojure.core.typed.check, :target clojure.core.typed.mm-env} {:source clojure.core.typed.check, :target clojure.core.typed.check-below} {:source clojure.core.typed.check, :target clojure.core.typed.check.loop} {:source clojure.core.typed.check, :target clojure.core.typed.check.type-hints} {:source clojure.core.typed.check, :target clojure.core.typed.open-result} {:source clojure.core.typed.check, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check, :target clojure.core.typed.check.value} {:source clojure.core.typed.check, :target clojure.core.typed.check.def} {:source clojure.core.typed.check, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check, :target clojure.core.typed.check.tag} {:source clojure.core.typed.check, :target clojure.core.typed.array-ops} {:source clojure.core.typed.check, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.check, :target clojure.core.typed.method-param-nilables} {:source clojure.core.typed.check, :target clojure.core.typed.check.isa} {:source clojure.core.typed.check, :target clojure.core.typed.check.invoke-kw} {:source clojure.core.typed.check, :target clojure.core.typed.check.try} {:source clojure.core.typed.check, :target clojure.core.typed.local-result} {:source clojure.core.typed.check, :target clojure.core.typed.special-form} {:source clojure.core.typed.check, :target clojure.core.typed.check.special.ann-form} {:source clojure.core.typed.check, :target clojure.core.typed.method-return-nilables} {:source clojure.core.typed.check, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.check, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.check, :target clojure.core.typed.debug} {:source clojure.core.typed.check, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check, :target clojure.core.typed.check.fn} {:source clojure.core.typed.check, :target clojure.core.typed.check.cli} {:source clojure.core.typed.check.if, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.if, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.if, :target clojure.core.typed.update} {:source clojure.core.typed.check.if, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.if, :target clojure.core.typed.errors} {:source clojure.core.typed.check.if, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.if, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.if, :target clojure.core.typed.utils} {:source clojure.core.typed.check.if, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.if, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.if, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.if, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.if, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.catch, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.catch, :target clojure.core.typed.errors} {:source clojure.core.typed.check.catch, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.catch, :target clojure.core.typed.utils} {:source clojure.core.typed.check.catch, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.catch, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.errors} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.utils} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.set-bang, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.do, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.do, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.do, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.update} {:source clojure.core.typed.check.do, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.do, :target clojure.core.typed.errors} {:source clojure.core.typed.check.do, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.do, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.do, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.do, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.do, :target clojure.core.typed.special-form} {:source clojure.core.typed.check.recur, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.recur, :target clojure.core.typed.errors} {:source clojure.core.typed.check.recur, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.recur, :target clojure.core.typed.utils} {:source clojure.core.typed.check.recur, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.recur, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.recur, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.map, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.map, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.map, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.map, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.map, :target clojure.core.typed.utils} {:source clojure.core.typed.check.map, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.map, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.map, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.errors} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.utils} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.letfn, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.nth, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.nth, :target clojure.core.typed.check.method} {:source clojure.core.typed.check.nth, :target clojure.core.typed} {:source clojure.core.typed.check.nth, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.nth, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.nth, :target clojure.core.typed.errors} {:source clojure.core.typed.check.nth, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.nth, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.nth, :target clojure.core.typed.utils} {:source clojure.core.typed.check.nth, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.nth, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.nth, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.nth, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.nth, :target clojure.core.typed.debug} {:source clojure.core.typed.check.nth, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.method, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.method, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.method, :target clojure.core.typed.errors} {:source clojure.core.typed.check.method, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.method, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.method, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.method, :target clojure.core.typed.utils} {:source clojure.core.typed.check.method, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.method, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.method, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.check.method, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.method, :target clojure.core.typed.check.type-hints} {:source clojure.core.typed.check.method, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.nthnext, :target clojure.core.typed.utils} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.utils} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.monitor, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.vector, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.vector, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.vector, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.vector, :target clojure.core.typed.utils} {:source clojure.core.typed.check.vector, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.vector, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.invoke, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.invoke, :target clojure.core.typed.utils} {:source clojure.core.typed.ctor-override-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.ctor-override-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.special.tc-ignore, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.get, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.get, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.get, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.get, :target clojure.core.typed.utils} {:source clojure.core.typed.check.get, :target clojure.core.typed.check.invoke-kw} {:source clojure.core.typed.check.multi, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.multi, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.inst, :target clojure.core.typed.type-rep} {:source clojure.core.typed.inst, :target clojure.core.typed.trans} {:source clojure.core.typed.inst, :target clojure.core.typed.errors} {:source clojure.core.typed.inst, :target clojure.core.typed.free-ops} {:source clojure.core.typed.inst, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.inst, :target clojure.core.typed.subtype} {:source clojure.core.typed.inst, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.inst, :target clojure.core.typed.utils} {:source clojure.core.typed.inst, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.inst, :target clojure.core.typed.subst} {:source clojure.core.typed.trans, :target clojure.core.typed.type-rep} {:source clojure.core.typed.trans, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.trans, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.trans, :target clojure.core.typed.utils} {:source clojure.core.typed.trans, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.trans, :target clojure.core.typed.subst} {:source clojure.core.typed.trans, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.fn-methods} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.fn-method-one} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.special.fn, :target clojure.core.typed.check.fn} {:source clojure.core.typed.check.case, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.case, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.case, :target clojure.core.typed.update} {:source clojure.core.typed.check.case, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.case, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.case, :target clojure.core.typed.utils} {:source clojure.core.typed.check.case, :target clojure.core.typed.tc-equiv} {:source clojure.core.typed.check.case, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.apply, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.apply, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.apply, :target clojure.core.typed.errors} {:source clojure.core.typed.check.apply, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.apply, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.apply, :target clojure.core.typed.utils} {:source clojure.core.typed.check.apply, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check.apply, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.apply, :target clojure.core.typed.subst} {:source clojure.core.typed.check.apply, :target clojure.core.typed.util-vars} {:source clojure.core.typed.reset-env, :target clojure.core.typed.ns-options} {:source clojure.core.typed.reset-env, :target clojure.core.typed.mm-env} {:source clojure.core.typed.reset-env, :target clojure.core.typed.base-env} {:source clojure.core.typed.reset-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.reset-env, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.check.set, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.set, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.set, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.set, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.set, :target clojure.core.typed.utils} {:source clojure.core.typed.check.set, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.set, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.set, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.set, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.special.loop, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.mm-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.mm-env, :target clojure.core.typed.errors} {:source clojure.core.typed.mm-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.mm-env, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.mm-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.base-env, :target clojure.core.typed.base-env-helper} {:source clojure.core.typed.base-env, :target clojure.core.typed} {:source clojure.core.typed.base-env, :target clojure.core.typed.path-rep} {:source clojure.core.typed.base-env, :target clojure.core.typed.base-env-common} {:source clojure.core.typed.base-env, :target clojure.core.typed.fold-default} {:source clojure.core.typed.base-env, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env, :target clojure.core.typed.subst} {:source clojure.core.typed.base-env, :target clojure.core.typed.base-env-clj-rclass} {:source clojure.core.typed.base-env, :target clojure.core.typed.name-env} {:source clojure.core.typed.base-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env, :target clojure.core.typed.object-rep} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.base-env-helper} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.base-env-common} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.fold-default} {:source clojure.core.typed.base-env-clj-rclass, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.type-rep} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.var-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.free-ops} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.utils} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.collect-phase} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.name-env} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.current-impl} {:source clojure.core.typed.base-env-helper, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.base-env-common, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.base-env-common, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.base-env-common, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.fold-default, :target clojure.core.typed.type-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.path-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.free-ops} {:source clojure.core.typed.fold-default, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.fold-default, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.fold-default, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.fold-default, :target clojure.core.typed.object-rep} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.frees} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.check.utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.errors} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect.gen-datatype} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect.typed-deps} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.subtype} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ns-options} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.dependency} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.profiling} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.method-param-nilables} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.deps.clojure.tools.namespace.dir} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.method-return-nilables} {:source clojure.core.typed.collect-phase, :target clojure.core.typed.collect.gen-protocol} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.frees} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.subtype} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.method-override-env} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.current-impl} {:source clojure.core.typed.collect.gen-datatype, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.check.utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.errors} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect.typed-deps, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.method-override-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.method-override-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.loop, :target clojure.core.typed.check.let} {:source clojure.core.typed.check.loop, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.let, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.let, :target clojure.core.typed.subst-obj} {:source clojure.core.typed.check.let, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.update} {:source clojure.core.typed.check.let, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.let, :target clojure.core.typed.errors} {:source clojure.core.typed.check.let, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.let, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.let, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.let, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.let, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.let, :target clojure.core.typed.check.print-env} {:source clojure.core.typed.check.let, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.let, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.let, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.let, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.tvar-env} {:source clojure.core.typed.check.print-env, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.reflect-utils} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.type-hints, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.value, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.value, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.value, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.value, :target clojure.core.typed.constant-type} {:source clojure.core.typed.check.value, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.value, :target clojure.core.typed.utils} {:source clojure.core.typed.check.value, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.value, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.value, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.value, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.value, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.def, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.def, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.def, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.def, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.def, :target clojure.core.typed.ns-options} {:source clojure.core.typed.check.def, :target clojure.core.typed.utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.def, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.def, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.def, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.def, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.def, :target clojure.core.typed.util-vars} {:source clojure.core.typed.ns-options, :target clojure.core.typed} {:source clojure.core.typed.check.tag, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.check.tag, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.tag, :target clojure.core.typed.errors} {:source clojure.core.typed.check.tag, :target clojure.core.typed.util-vars} {:source clojure.core.typed.array-ops, :target clojure.core.typed.type-rep} {:source clojure.core.typed.array-ops, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.try, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.try, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.try, :target clojure.core.typed.utils} {:source clojure.core.typed.check.try, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.try, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.try, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.try, :target clojure.core.typed.object-rep} {:source clojure.core.typed.deps.clojure.tools.namespace.dir, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.deps.clojure.tools.namespace.dir, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.local-result, :target clojure.core.typed.type-rep} {:source clojure.core.typed.local-result, :target clojure.core.typed.lex-env} {:source clojure.core.typed.local-result, :target clojure.core.typed.check.utils} {:source clojure.core.typed.local-result, :target clojure.core.typed.path-rep} {:source clojure.core.typed.local-result, :target clojure.core.typed.var-env} {:source clojure.core.typed.local-result, :target clojure.core.typed.errors} {:source clojure.core.typed.local-result, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.local-result, :target clojure.core.typed.path-type} {:source clojure.core.typed.local-result, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.local-result, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.local-result, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.local-result, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.local-result, :target clojure.core.typed.check-below} {:source clojure.core.typed.local-result, :target clojure.core.typed.util-vars} {:source clojure.core.typed.local-result, :target clojure.core.typed.debug} {:source clojure.core.typed.local-result, :target clojure.core.typed.object-rep} {:source clojure.core.typed.path-type, :target clojure.core.typed.type-rep} {:source clojure.core.typed.path-type, :target clojure.core.typed} {:source clojure.core.typed.path-type, :target clojure.core.typed.check.utils} {:source clojure.core.typed.path-type, :target clojure.core.typed.path-rep} {:source clojure.core.typed.path-type, :target clojure.core.typed.errors} {:source clojure.core.typed.path-type, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.path-type, :target clojure.core.typed.subtype} {:source clojure.core.typed.path-type, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.path-type, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.utils} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.special.ann-form, :target clojure.core.typed.object-rep} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.collect-utils} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.errors} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect.gen-protocol, :target clojure.core.typed.util-vars} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.collect-utils, :target clojure.core.typed} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.var-env} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.errors} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.free-ops} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.name-env} {:source clojure.core.typed.collect-utils, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.fn, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn, :target clojure.core.typed.check.fn-methods} {:source clojure.core.typed.check.fn, :target clojure.core.typed} {:source clojure.core.typed.check.fn, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.fn, :target clojure.core.typed.utils} {:source clojure.core.typed.check.fn, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.fn, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.fn, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.errors} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.check.fn-method-one} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.fn-methods, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.lex-env} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.fn-method-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.update} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.var-env} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.errors} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.funapp} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.multi-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.open-result} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.isa} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.check.recur-utils} {:source clojure.core.typed.check.fn-method-one, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.abo} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.fn-method-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.update, :target clojure.core.typed.type-rep} {:source clojure.core.typed.update, :target clojure.core.typed.lex-env} {:source clojure.core.typed.update, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.update, :target clojure.core.typed.check.utils} {:source clojure.core.typed.update, :target clojure.core.typed.path-rep} {:source clojure.core.typed.update, :target clojure.core.typed.errors} {:source clojure.core.typed.update, :target clojure.core.typed.free-ops} {:source clojure.core.typed.update, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.update, :target clojure.core.typed.subtype} {:source clojure.core.typed.update, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.update, :target clojure.core.typed.utils} {:source clojure.core.typed.update, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.update, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.update, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.update, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.update, :target clojure.core.typed.profiling} {:source clojure.core.typed.update, :target clojure.core.typed.remove} {:source clojure.core.typed.var-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.var-env, :target clojure.core.typed.lex-env} {:source clojure.core.typed.var-env, :target clojure.core.typed} {:source clojure.core.typed.var-env, :target clojure.core.typed.errors} {:source clojure.core.typed.var-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.var-env, :target clojure.core.typed.env} {:source clojure.core.typed.var-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.var-env, :target clojure.core.typed.util-vars} {:source clojure.core.typed.lex-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.lex-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.lex-env, :target clojure.core.typed.utils} {:source clojure.core.typed.lex-env, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.lex-env, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.lex-env, :target clojure.core.typed.util-vars} {:source clojure.core.typed.lex-env, :target clojure.core.typed.object-rep} {:source clojure.core.typed.lex-env, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.funapp-one} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.frees} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.errors} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.subst} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.invoke-kw} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.check.app-error} {:source clojure.core.typed.check.funapp, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.errors} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.open-result} {:source clojure.core.typed.check.funapp-one, :target clojure.core.typed.object-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.type-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.abo, :target clojure.core.typed.utils} {:source clojure.core.typed.abo, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.abo, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.abo, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.multi-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.multi-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.remove, :target clojure.core.typed.type-rep} {:source clojure.core.typed.remove, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.remove, :target clojure.core.typed.subtype} {:source clojure.core.typed.open-result, :target clojure.core.typed.type-rep} {:source clojure.core.typed.open-result, :target clojure.core.typed.subst-obj} {:source clojure.core.typed.open-result, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.open-result, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.open-result, :target clojure.core.typed.object-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.type-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.free-in} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.errors} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.subst-obj, :target clojure.core.typed.object-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.type-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.free-in, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.free-in, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed} {:source clojure.core.typed.check.isa, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.isa, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.isa, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.isa, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.isa, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.isa, :target clojure.core.typed.tc-equiv} {:source clojure.core.typed.check.isa, :target clojure.core.typed.filter-protocols} {:source clojure.core.typed.check.isa, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.isa, :target clojure.core.typed.object-rep} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.type-rep} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.tc-equiv, :target clojure.core.typed.check-below} {:source clojure.core.typed.filter-protocols, :target clojure.core.typed} {:source clojure.core.typed.filter-protocols, :target clojure.core.typed.utils} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.errors} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.utils} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.check-below} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.invoke-kw, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check-below, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check-below, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check-below, :target clojure.core.typed.errors} {:source clojure.core.typed.check-below, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check-below, :target clojure.core.typed.subtype} {:source clojure.core.typed.check-below, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check-below, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check-below, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check-below, :target clojure.core.typed.debug} {:source clojure.core.typed.check-below, :target clojure.core.typed.object-rep} {:source clojure.core.typed.check.recur-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.recur-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.check.utils} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.errors} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.app-error, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.utils, :target clojure.core.typed.analyze-clj} {:source clojure.core.typed.check.utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.utils, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.check.utils, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.reflect-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed} {:source clojure.core.typed.check.utils, :target clojure.core.typed.path-rep} {:source clojure.core.typed.check.utils, :target clojure.core.typed.errors} {:source clojure.core.typed.check.utils, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.utils, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.utils, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.check.utils, :target clojure.core.typed.subtype} {:source clojure.core.typed.check.utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.ns-deps-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.utils, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.check.utils, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.check.utils, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.check.utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.check.utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.check.utils, :target clojure.core.typed.util-vars} {:source clojure.core.typed.check.utils, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.check.utils, :target clojure.core.typed.method-param-nilables} {:source clojure.core.typed.check.utils, :target clojure.core.typed.method-return-nilables} {:source clojure.core.typed.check.utils, :target clojure.core.typed.debug} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.errors} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.trim} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.util-vars} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.special-form} {:source clojure.core.typed.analyze-clj, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.deps.clojure.tools.namespace.file} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.errors} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.ns-deps-utils, :target clojure.core.typed.ns-deps} {:source clojure.core.typed.deps.clojure.tools.namespace.file, :target clojure.core.typed.deps.clojure.tools.namespace.track} {:source clojure.core.typed.deps.clojure.tools.namespace.file, :target clojure.core.typed.deps.clojure.tools.namespace.parse} {:source clojure.core.typed.deps.clojure.tools.namespace.track, :target clojure.core.typed.deps.clojure.tools.namespace.dependency} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.trim} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.warn-earmuff} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.reader} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.core.memoize} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.warn-earmuff, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.default-data-readers} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.impl.commons} {:source clojure.core.typed.deps.clojure.tools.reader, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.reader.impl.commons, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader.impl.commons, :target clojure.core.typed.deps.clojure.tools.reader.reader-types} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.emit-form} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.emit-form, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.ns-deps, :target clojure.core.typed} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.nilsafe-utils} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.env} {:source clojure.core.typed.ns-deps, :target clojure.core.typed.current-impl} {:source clojure.core.typed.method-param-nilables, :target clojure.core.typed.type-rep} {:source clojure.core.typed.method-param-nilables, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.deps.clojure.tools.reader.reader-types, :target clojure.core.typed.deps.clojure.tools.reader.impl.utils} {:source clojure.core.typed.deps.clojure.tools.reader.impl.utils, :target clojure.core.typed.deps.clojure.tools.reader.impl.ExceptionInfo} {:source clojure.core.typed.method-return-nilables, :target clojure.core.typed.type-rep} {:source clojure.core.typed.method-return-nilables, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.fix-case-test} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.trim} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.fix-case-test, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.constant-lifter} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr, :target clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr, :target clojure.core.typed.deps.clojure.tools.analyzer} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils, :target clojure.core.typed.deps.clojure.core.memoize} {:source clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.constant-lifter, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.trim, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.trim, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta, :target clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.core.memoize, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify, :target clojure.core.typed.deps.clojure.tools.analyzer.ast} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.deps.clojure.tools.analyzer.ast, :target clojure.core.typed.deps.clojure.tools.analyzer.utils} {:source clojure.core.typed.deps.clojure.tools.analyzer.utils, :target clojure.core.typed.deps.clojure.tools.analyzer.env} {:source clojure.core.typed.check.cli, :target clojure.core.typed.type-rep} {:source clojure.core.typed.check.cli, :target clojure.core.typed.free-ops} {:source clojure.core.typed.check.cli, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.check.cli, :target clojure.core.typed.constant-type} {:source clojure.core.typed.check.cli, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.check.cli, :target clojure.core.typed.utils} {:source clojure.core.typed.check.cli, :target clojure.core.typed.cs-gen} {:source clojure.core.typed.check.cli, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.check.cli, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.type-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.promote-demote} {:source clojure.core.typed.cs-gen, :target clojure.core.typed} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.frees} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.errors} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.free-ops} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.subtype} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.profiling} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.subst} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.current-impl} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.util-vars} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.object-rep} {:source clojure.core.typed.cs-gen, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.type-rep} {:source clojure.core.typed.promote-demote, :target clojure.core.typed} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.frees} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.utils} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.promote-demote, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.subtype, :target clojure.core.typed.type-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.datatype-ancestor-env} {:source clojure.core.typed.subtype, :target clojure.core.typed.type-protocols} {:source clojure.core.typed.subtype, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.frees} {:source clojure.core.typed.subtype, :target clojure.core.typed.path-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.errors} {:source clojure.core.typed.subtype, :target clojure.core.typed.free-ops} {:source clojure.core.typed.subtype, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.subtype, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.subtype, :target clojure.core.typed.parse-unparse} {:source clojure.core.typed.subtype, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.assoc-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.profiling} {:source clojure.core.typed.subtype, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.subtype, :target clojure.core.typed.current-impl} {:source clojure.core.typed.subtype, :target clojure.core.typed.util-vars} {:source clojure.core.typed.subtype, :target clojure.core.typed.object-rep} {:source clojure.core.typed.subtype, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.nilsafe-utils} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.utils} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.subst} {:source clojure.core.typed.datatype-ancestor-env, :target clojure.core.typed.env} {:source clojure.core.typed.type-protocols, :target clojure.core.typed} {:source clojure.core.typed.type-protocols, :target clojure.core.typed.utils} {:source clojure.core.typed.nilsafe-utils, :target clojure.core.typed} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.type-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.path-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.errors} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.free-ops} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.constant-type} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.name-env} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.current-impl} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.util-vars} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.dvar-env} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.object-rep} {:source clojure.core.typed.parse-unparse, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.constant-type, :target clojure.core.typed.type-rep} {:source clojure.core.typed.constant-type, :target clojure.core.typed.hset-utils} {:source clojure.core.typed.constant-type, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.hset-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.type-rep} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.errors} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.free-ops} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.utils} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.assoc-utils, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.subst, :target clojure.core.typed.type-rep} {:source clojure.core.typed.subst, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.subst, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.subst, :target clojure.core.typed} {:source clojure.core.typed.subst, :target clojure.core.typed.frees} {:source clojure.core.typed.subst, :target clojure.core.typed.errors} {:source clojure.core.typed.subst, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.subst, :target clojure.core.typed.utils} {:source clojure.core.typed.subst, :target clojure.core.typed.filter-ops} {:source clojure.core.typed.subst, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.subst, :target clojure.core.typed.object-rep} {:source clojure.core.typed.frees, :target clojure.core.typed.type-rep} {:source clojure.core.typed.frees, :target clojure.core.typed} {:source clojure.core.typed.frees, :target clojure.core.typed.errors} {:source clojure.core.typed.frees, :target clojure.core.typed.free-ops} {:source clojure.core.typed.frees, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.frees, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.frees, :target clojure.core.typed.utils} {:source clojure.core.typed.frees, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.frees, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.frees, :target clojure.core.typed.name-env} {:source clojure.core.typed.frees, :target clojure.core.typed.current-impl} {:source clojure.core.typed.frees, :target clojure.core.typed.object-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.type-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.path-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.utils} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.profiling} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.debug} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.object-rep} {:source clojure.core.typed.filter-ops, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.name-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.name-env, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.name-env, :target clojure.core.typed} {:source clojure.core.typed.name-env, :target clojure.core.typed.errors} {:source clojure.core.typed.name-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.name-env, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.name-env, :target clojure.core.typed.jsnominal-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.utils} {:source clojure.core.typed.name-env, :target clojure.core.typed.declared-kind-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.name-env, :target clojure.core.typed.env} {:source clojure.core.typed.name-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.type-ctors} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.env} {:source clojure.core.typed.jsnominal-env, :target clojure.core.typed.current-impl} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.type-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.datatype-env} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.deps.clojure.math.combinatorics} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.coerce-ann} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.cs-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.fold-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.indirect-ann} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.type-ctors, :target clojure.core.typed} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.path-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.errors} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.free-ops} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.protocol-env} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.utils} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.deps.clojure.core.cache} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.rclass-env} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.profiling} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.current-impl} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.util-vars} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.object-rep} {:source clojure.core.typed.type-ctors, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.datatype-env, :target clojure.core.typed} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.errors} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.datatype-env, :target clojure.core.typed.env} {:source clojure.core.typed.coerce-ann, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.coerce-ann, :target clojure.core.typed} {:source clojure.core.typed.cs-rep, :target clojure.core.typed.type-rep} {:source clojure.core.typed.cs-rep, :target clojure.core.typed} {:source clojure.core.typed.cs-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.cs-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.fold-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.indirect-ann, :target clojure.core.typed.type-rep} {:source clojure.core.typed.indirect-ann, :target clojure.core.typed} {:source clojure.core.typed.indirect-ann, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.protocol-env, :target clojure.core.typed} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.errors} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.errors-ann} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.contract-ann} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.env} {:source clojure.core.typed.protocol-env, :target clojure.core.typed.util-vars} {:source clojure.core.typed.errors-ann, :target clojure.core.typed} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.errors} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.declared-kind-env, :target clojure.core.typed.env} {:source clojure.core.typed.deps.clojure.core.cache, :target clojure.core.typed.deps.clojure.data.priority-map} {:source clojure.core.typed.rclass-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.rclass-env, :target clojure.core.typed.free-ops} {:source clojure.core.typed.rclass-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.free-ops, :target clojure.core.typed.type-rep} {:source clojure.core.typed.free-ops, :target clojure.core.typed.tvar-bnds} {:source clojure.core.typed.free-ops, :target clojure.core.typed} {:source clojure.core.typed.free-ops, :target clojure.core.typed.tvar-env} {:source clojure.core.typed.free-ops, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.tvar-bnds, :target clojure.core.typed.type-rep} {:source clojure.core.typed.tvar-bnds, :target clojure.core.typed} {:source clojure.core.typed.tvar-bnds, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.tvar-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.tvar-env, :target clojure.core.typed} {:source clojure.core.typed.tvar-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.dvar-env, :target clojure.core.typed.type-rep} {:source clojure.core.typed.dvar-env, :target clojure.core.typed} {:source clojure.core.typed.dvar-env, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.type-rep} {:source clojure.core.typed.object-rep, :target clojure.core.typed} {:source clojure.core.typed.object-rep, :target clojure.core.typed.path-rep} {:source clojure.core.typed.object-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.filter-rep} {:source clojure.core.typed.object-rep, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.object-rep, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.object-rep, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.type-rep} {:source clojure.core.typed.filter-rep, :target clojure.core.typed} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.path-rep} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.indirect-utils} {:source clojure.core.typed.filter-rep, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.type-rep, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.type-rep, :target clojure.core.typed} {:source clojure.core.typed.type-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.type-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.type-rep, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.type-rep, :target clojure.core.typed.contract-ann} {:source clojure.core.typed.type-rep, :target clojure.core.typed.current-impl} {:source clojure.core.typed.type-rep, :target clojure.core.typed.indirect-ops} {:source clojure.core.typed.path-rep, :target clojure.core.typed} {:source clojure.core.typed.path-rep, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.path-rep, :target clojure.core.typed.utils} {:source clojure.core.typed.utils, :target clojure.core.typed.deps.clojure.core.contracts} {:source clojure.core.typed.utils, :target clojure.core.typed} {:source clojure.core.typed.utils, :target clojure.core.typed.errors} {:source clojure.core.typed.utils, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.utils, :target clojure.core.typed.profiling} {:source clojure.core.typed.utils, :target clojure.core.typed.impl-protocols} {:source clojure.core.typed.utils, :target clojure.core.typed.deps.clojure.core.contracts.constraints} {:source clojure.core.typed.utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.utils, :target clojure.core.typed.util-vars} {:source clojure.core.typed.impl-protocols, :target clojure.core.typed} {:source clojure.core.typed.impl-protocols, :target clojure.core.typed.def-utils} {:source clojure.core.typed.def-utils, :target clojure.core.typed.deps.clojure.core.contracts.constraints} {:source clojure.core.typed.deps.clojure.core.contracts.constraints, :target clojure.core.typed.deps.clojure.core.contracts} {:source clojure.core.typed.deps.clojure.core.contracts.constraints, :target clojure.core.typed.deps.clojure.core.contracts.impl.transformers} {:source clojure.core.typed.deps.clojure.core.contracts.constraints, :target clojure.core.typed.deps.clojure.core.contracts.impl.utils} {:source clojure.core.typed.deps.clojure.core.contracts, :target clojure.core.typed.deps.clojure.core.contracts.impl.transformers} {:source clojure.core.typed.deps.clojure.core.contracts, :target clojure.core.typed.deps.clojure.core.contracts.impl.utils} {:source clojure.core.typed.deps.clojure.core.contracts.impl.transformers, :target clojure.core.typed.deps.clojure.core.contracts.impl.utils} {:source clojure.core.typed.deps.clojure.core.contracts.impl.transformers, :target clojure.core.typed.deps.clojure.core.unify} {:source clojure.core.typed.deps.clojure.core.contracts.impl.transformers, :target clojure.core.typed.deps.clojure.core.contracts.impl.funcify} {:source clojure.core.typed.deps.clojure.core.contracts.impl.utils, :target clojure.core.typed.deps.clojure.core.unify} {:source clojure.core.typed.contract-ann, :target clojure.core.typed} {:source clojure.core.typed, :target clojure.core.typed.internal} {:source clojure.core.typed, :target clojure.core.typed.load-if-needed} {:source clojure.core.typed, :target clojure.core.typed.macros} {:source clojure.core.typed, :target clojure.core.typed.import-macros} {:source clojure.core.typed, :target clojure.core.typed.errors} {:source clojure.core.typed, :target clojure.core.typed.profiling} {:source clojure.core.typed, :target clojure.core.typed.current-impl} {:source clojure.core.typed, :target clojure.core.typed.util-vars} {:source clojure.core.typed, :target clojure.core.typed.special-form} {:source clojure.core.typed.load-if-needed, :target clojure.core.typed.errors} {:source clojure.core.typed.load-if-needed, :target clojure.core.typed.util-vars} {:source clojure.core.typed.macros, :target clojure.core.typed.internal} {:source clojure.core.typed.macros, :target clojure.core.typed.errors} {:source clojure.core.typed.macros, :target clojure.core.typed.util-vars} {:source clojure.core.typed.macros, :target clojure.core.typed.special-form} {:source clojure.core.typed.internal, :target clojure.core.typed.errors} {:source clojure.core.typed.internal, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.errors, :target clojure.core.typed.ast-utils} {:source clojure.core.typed.errors, :target clojure.core.typed.current-impl} {:source clojure.core.typed.errors, :target clojure.core.typed.util-vars} {:source clojure.core.typed.ast-utils, :target clojure.core.typed.coerce-utils} {:source clojure.core.typed.ast-utils, :target clojure.core.typed.contract-utils} {:source clojure.core.typed.ast-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.coerce-utils, :target clojure.core.typed.current-impl} {:source clojure.core.typed.current-impl, :target clojure.core.typed.profiling} {:source clojure.core.typed.current-impl, :target clojure.core.typed.env} {:source clojure.core.typed.indirect-ops, :target clojure.core.typed.indirect-utils}], :nodes [{:name "clojure.core.typed.init"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.dynvars"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.nsforms"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.load-core"} {:name "clojure.core.typed.rclass-ancestor-env"} {:name "clojure.core.typed.base-env-cljs"} {:name "clojure.core.typed.deps.clojure.tools.namespace.find"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.side-effect"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-loops"} {:name "clojure.core.typed.all-envs"} {:name "clojure.core.typed.check-ns-cljs"} {:name "clojure.core.typed.check-form-cljs"} {:name "clojure.core.typed.collect-cljs"} {:name "clojure.core.typed.deps.clojure.tools.namespace.move"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.hygienic"} {:name "clojure.core.typed.check-cljs"} {:name "clojure.core.typed.analyze-cljs"} {:name "clojure.core.typed.repl"} {:name "clojure.core.typed.load"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.privatevars"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.tail-recursion"} {:name "cljs.core.typed.async"} {:name "cljs.core.typed"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.docstring"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.examples.reflection"} {:name "clojure.core.typed.bootstrap-cljs"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.collect-closed-overs"} {:name "clojure.core.typed.deps.clojure.tools.namespace"} {:name "clojure.core.typed.hole"} {:name "clojure.core.typed.type-contract"} {:name "clojure.core.typed.ast-ops"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.fold"} {:name "clojure.core.typed.base-env-helper-cljs"} {:name "clojure.core.typed.util-cljs"} {:name "clojure.core.typed.deps.clojure.tools.namespace.repl"} {:name "clojure.core.typed.deps.clojure.tools.namespace.reload"} {:name "clojure.core.typed.parse-ast"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer.hygienic"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer.fold"} {:name "clojure.core.typed.deps.cljs.jvm.tools.analyzer.emit-form"} {:name "clojure.core.typed.check-form-clj"} {:name "clojure.core.typed.check-form-common"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.ast.query"} {:name "clojure.core.typed.async"} {:name "clojure.core.typed.check.dot-cljs"} {:name "clojure.core.typed.statistics"} {:name "clojure.core.typed.deps.clojure.tools.reader.edn"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.emit-form"} {:name "clojure.core.typed.deps.clojure.jvm.tools.analyzer.util"} {:name "clojure.core.typed.contrib-annotations"} {:name "clojure.core.typed.check-ns-clj"} {:name "clojure.core.typed.check-ns-common"} {:name "clojure.core.typed.reset-caches"} {:name "clojure.core.typed.file-mapping"} {:name "clojure.core.typed.check"} {:name "clojure.core.typed.check.if"} {:name "clojure.core.typed.check.catch"} {:name "clojure.core.typed.check.set-bang"} {:name "clojure.core.typed.check.do"} {:name "clojure.core.typed.check.recur"} {:name "clojure.core.typed.check.map"} {:name "clojure.core.typed.check.letfn"} {:name "clojure.core.typed.check.nth"} {:name "clojure.core.typed.check.method"} {:name "clojure.core.typed.check.nthnext"} {:name "clojure.core.typed.check.monitor"} {:name "clojure.core.typed.check.vector"} {:name "clojure.core.typed.check.invoke"} {:name "clojure.core.typed.ctor-override-env"} {:name "clojure.core.typed.check.special.tc-ignore"} {:name "clojure.core.typed.check.get"} {:name "clojure.core.typed.check.multi"} {:name "clojure.core.typed.inst"} {:name "clojure.core.typed.trans"} {:name "clojure.core.typed.check.special.fn"} {:name "clojure.core.typed.check.case"} {:name "clojure.core.typed.check.apply"} {:name "clojure.core.typed.reset-env"} {:name "clojure.core.typed.check.set"} {:name "clojure.core.typed.check.special.loop"} {:name "clojure.core.typed.mm-env"} {:name "clojure.core.typed.base-env"} {:name "clojure.core.typed.base-env-clj-rclass"} {:name "clojure.core.typed.base-env-helper"} {:name "clojure.core.typed.base-env-common"} {:name "clojure.core.typed.fold-default"} {:name "clojure.core.typed.collect-phase"} {:name "clojure.core.typed.collect.gen-datatype"} {:name "clojure.core.typed.collect.typed-deps"} {:name "clojure.core.typed.method-override-env"} {:name "clojure.core.typed.check.loop"} {:name "clojure.core.typed.check.let"} {:name "clojure.core.typed.check.print-env"} {:name "clojure.core.typed.check.type-hints"} {:name "clojure.core.typed.check.value"} {:name "clojure.core.typed.check.def"} {:name "clojure.core.typed.ns-options"} {:name "clojure.core.typed.check.tag"} {:name "clojure.core.typed.array-ops"} {:name "clojure.core.typed.check.try"} {:name "clojure.core.typed.deps.clojure.tools.namespace.dir"} {:name "clojure.core.typed.local-result"} {:name "clojure.core.typed.path-type"} {:name "clojure.core.typed.check.special.ann-form"} {:name "clojure.core.typed.collect.gen-protocol"} {:name "clojure.core.typed.collect-utils"} {:name "clojure.core.typed.check.fn"} {:name "clojure.core.typed.check.fn-methods"} {:name "clojure.core.typed.check.fn-method-one"} {:name "clojure.core.typed.check.fn-method-utils"} {:name "clojure.core.typed.update"} {:name "clojure.core.typed.var-env"} {:name "clojure.core.typed.lex-env"} {:name "clojure.core.typed.check.funapp"} {:name "clojure.core.typed.check.funapp-one"} {:name "clojure.core.typed.abo"} {:name "clojure.core.typed.check.multi-utils"} {:name "clojure.core.typed.remove"} {:name "clojure.core.typed.open-result"} {:name "clojure.core.typed.subst-obj"} {:name "clojure.core.typed.free-in"} {:name "clojure.core.typed.check.isa"} {:name "clojure.core.typed.tc-equiv"} {:name "clojure.core.typed.filter-protocols"} {:name "clojure.core.typed.check.invoke-kw"} {:name "clojure.core.typed.check-below"} {:name "clojure.core.typed.check.recur-utils"} {:name "clojure.core.typed.check.app-error"} {:name "clojure.core.typed.check.utils"} {:name "clojure.core.typed.analyze-clj"} {:name "clojure.core.typed.reflect-utils"} {:name "clojure.core.typed.ns-deps-utils"} {:name "clojure.core.typed.deps.clojure.tools.namespace.file"} {:name "clojure.core.typed.deps.clojure.tools.namespace.track"} {:name "clojure.core.typed.deps.clojure.tools.namespace.dependency"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.jvm"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.warn-on-reflection"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-loop-locals"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.classify-invoke"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.box"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.warn-earmuff"} {:name "clojure.core.typed.deps.clojure.tools.reader"} {:name "clojure.core.typed.deps.clojure.tools.reader.default-data-readers"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes"} {:name "clojure.core.typed.deps.clojure.tools.reader.impl.commons"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.emit-form"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.emit-form"} {:name "clojure.core.typed.deps.clojure.tools.namespace.parse"} {:name "clojure.core.typed.ns-deps"} {:name "clojure.core.typed.method-param-nilables"} {:name "clojure.core.typed.deps.clojure.tools.reader.reader-types"} {:name "clojure.core.typed.deps.clojure.tools.reader.impl.utils"} {:name "clojure.core.typed.deps.clojure.tools.reader.impl.ExceptionInfo"} {:name "clojure.core.typed.method-return-nilables"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.validate-recur"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.infer-tag"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-host-info"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.fix-case-test"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.annotate-tag"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.constant-lifter"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.jvm.analyze-host-expr"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.jvm.utils"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.constant-lifter"} {:name "clojure.core.typed.deps.clojure.tools.analyzer"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.trim"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.add-binding-atom"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.cleanup"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.elide-meta"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.source-info"} {:name "clojure.core.typed.deps.clojure.core.memoize"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.passes.uniquify"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.ast"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.utils"} {:name "clojure.core.typed.deps.clojure.tools.analyzer.env"} {:name "clojure.core.typed.check.cli"} {:name "clojure.core.typed.cs-gen"} {:name "clojure.core.typed.promote-demote"} {:name "clojure.core.typed.subtype"} {:name "clojure.core.typed.datatype-ancestor-env"} {:name "clojure.core.typed.type-protocols"} {:name "clojure.core.typed.nilsafe-utils"} {:name "clojure.core.typed.parse-unparse"} {:name "clojure.core.typed.constant-type"} {:name "clojure.core.typed.hset-utils"} {:name "clojure.core.typed.assoc-utils"} {:name "clojure.core.typed.subst"} {:name "clojure.core.typed.frees"} {:name "clojure.core.typed.filter-ops"} {:name "clojure.core.typed.name-env"} {:name "clojure.core.typed.jsnominal-env"} {:name "clojure.core.typed.type-ctors"} {:name "clojure.core.typed.datatype-env"} {:name "clojure.core.typed.deps.clojure.math.combinatorics"} {:name "clojure.core.typed.coerce-ann"} {:name "clojure.core.typed.cs-rep"} {:name "clojure.core.typed.fold-rep"} {:name "clojure.core.typed.indirect-ann"} {:name "clojure.core.typed.protocol-env"} {:name "clojure.core.typed.errors-ann"} {:name "clojure.core.typed.declared-kind-env"} {:name "clojure.core.typed.deps.clojure.core.cache"} {:name "clojure.core.typed.deps.clojure.data.priority-map"} {:name "clojure.core.typed.rclass-env"} {:name "clojure.core.typed.free-ops"} {:name "clojure.core.typed.tvar-bnds"} {:name "clojure.core.typed.tvar-env"} {:name "clojure.core.typed.dvar-env"} {:name "clojure.core.typed.debug"} {:name "clojure.core.typed.object-rep"} {:name "clojure.core.typed.filter-rep"} {:name "clojure.core.typed.type-rep"} {:name "clojure.core.typed.path-rep"} {:name "clojure.core.typed.utils"} {:name "clojure.core.typed.impl-protocols"} {:name "clojure.core.typed.def-utils"} {:name "clojure.core.typed.deps.clojure.core.contracts.constraints"} {:name "clojure.core.typed.deps.clojure.core.contracts"} {:name "clojure.core.typed.deps.clojure.core.contracts.impl.transformers"} {:name "clojure.core.typed.deps.clojure.core.contracts.impl.utils"} {:name "clojure.core.typed.deps.clojure.core.unify"} {:name "clojure.core.typed.deps.clojure.core.contracts.impl.funcify"} {:name "clojure.core.typed.contract-ann"} {:name "clojure.core.typed"} {:name "clojure.core.typed.load-if-needed"} {:name "clojure.core.typed.macros"} {:name "clojure.core.typed.internal"} {:name "clojure.core.typed.import-macros"} {:name "clojure.core.typed.errors"} {:name "clojure.core.typed.ast-utils"} {:name "clojure.core.typed.coerce-utils"} {:name "clojure.core.typed.contract-utils"} {:name "clojure.core.typed.current-impl"} {:name "clojure.core.typed.profiling"} {:name "clojure.core.typed.env"} {:name "clojure.core.typed.util-vars"} {:name "clojure.core.typed.special-form"} {:name "clojure.core.typed.indirect-ops"} {:name "clojure.core.typed.indirect-utils"}]}}
